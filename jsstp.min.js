class sstp_info_t{#head;#unknown_lines;constructor(t,s,e){if(this.set_head(t),this.#unknown_lines=e,s)if(s.keys)for(var n of s.keys())this[n]=s.get(n);else if("object"==typeof s)for(var i in s)this[i]=s[i];else console.error("sstp_info_t: info_body is not a Map or object: "+typeof s)}static from_string(t){var s=t.split("\r\n")[0],e=new Map,n=t.split("\r\n"),i=(n.shift(),[]),_=[": ",String.fromCharCode(1)];for(let t=0;t<n.length;t++){var h,r,a=n[t];if(""!=a){let s="";for(let t=0;t<_.length;t++)if(-1!=a.indexOf(_[t])){s=_[t];break}""!=s?(h=a.split(s)[0],r=a.replace(h+s,""),e.set(h,r)):i.push(n[t])}}return new sstp_info_t(s,e,i)}set_head(t){this.#head=t=null==t?"NOTIFY SSTP/1.1":t}get_body(){var t,s=new Map;for(t in this)s.set(t,this[t]);return s}get_unknown_lines(){return this.#unknown_lines}get_head(){return this.#head}to_string(){let t=this.#head+"\r\n";for(var s in this)t+=`${s}: ${this[s]}\r\n`;return t+="\r\n"}return_code(){var s=this.#head.split(" ");for(let t=0;t<s.length;t++)if(!isNaN(s[t]))return parseInt(s[t]);return-1}get_passthrough(t){return this["X-SSTP-PassThru-"+t]}}class sstp_fmo_info_t{constructor(t={}){for(var s in t){var e=s.split(".")[0],n=s.split(".")[1];this[e]||(this[e]={}),this[e][n]=t[s]}}get_uuid_by(t,s){for(var e in this)if(this[e][t]==s)return e;return null}get_list_of(t){var s,e=[];for(s in this)e.push(this[s][t]);return e}keys(){return Object.keys(this)}length(){return this.keys().length}available(){return 0!=this.length()}}class ghost_events_queryer_t{#base_jsstp;#ghost_has_has_event;#ghost_has_get_supported_events;#ghost_event_list;#ghost_event_list_cache;constructor(t=jsstp){this.#base_jsstp=t}async check_event(t,s="local"){var e;return this.#ghost_has_get_supported_events?this.#ghost_event_list[s].includes(t):!!this.#ghost_has_has_event&&(null!=this.#ghost_event_list_cache[s][t]?this.#ghost_event_list_cache[s][t]:(e=await this.#base_jsstp.has_event(t),this.#ghost_event_list_cache[s][t]=e))}available(){return this.#ghost_has_has_event}get_supported_events_available(){return this.#ghost_has_get_supported_events}async reset(){this.clear(),this.#ghost_has_has_event=await this.#base_jsstp.has_event("Has_Event"),this.#ghost_has_get_supported_events=await this.#base_jsstp.has_event("Get_Supported_Events"),this.#ghost_has_get_supported_events&&(this.#ghost_event_list=await this.#base_jsstp.get_supported_events())}async init(){await this.reset()}clear(){this.#ghost_has_has_event=!1,this.#ghost_has_get_supported_events=!1,this.#ghost_event_list=null,this.#ghost_event_list_cache={local:{},external:{}}}}class jsstp_t{#headers;#default_info;#host;constructor(t,s){this.#headers=new Map,this.set_host(s),this.set_RequestHeader("Content-Type","text/plain"),window.location.origin&&this.set_RequestHeader("Origin",window.location.origin),this.#default_info=new Map,this.set_default_info("Charset","UTF-8"),this.set_sendername(t)}set_RequestHeader(t,s){null==s?delete this.#headers[t]:this.#headers[t]=s}set_default_info(t){this.#default_info=t}set_default_info(t,s){null==s?delete this.#default_info[t]:this.#default_info[t]=s}set_host(t){this.#host=t=null==t?"http://localhost:9801/api/sstp/v1":t}set_sendername(t){this.#default_info.Sender=t=null==t?"jsstp-client":t}#base_post(t,s){const n={method:"POST",headers:this.#headers,body:t};t=(s,e)=>{fetch(this.#host,n).then(function(t){200!=t.status?e(t.status):t.text().then(function(t){s(sstp_info_t.from_string(t))})})};if(s&&t(s,function(){}),null==s)return new Promise(t)}costom_send(t,s,e){if("object"==typeof s){var n,i,_=new sstp_info_t;for(n in _.set_head(t),this.#default_info)_[n]=this.#default_info[n];for(i in s)_[i]=s[i];return this.#base_post(_.to_string(),e)}console.error("jsstp.send: wrong type of info: "+typeof s)}SEND(t,s){return this.costom_send("SEND SSTP/1.4",t,s)}NOTIFY(t,s){return this.costom_send("NOTIFY SSTP/1.1",t,s)}COMMUNICATE(t,s){return this.costom_send("COMMUNICATE SSTP/1.1",t,s)}EXECUTE(t,s){return this.costom_send("EXECUTE SSTP/1.2",t,s)}GIVE(t,s){return this.costom_send("GIVE SSTP/1.1",t,s)}by_type(type){return eval("this."+type).bind(this)}async has_event(t,s="external"){t=(await this.SEND({Event:"Has_Event",Reference0:t,Reference1:s})).get_passthrough("Result");return!!t&&"0"!=t}async get_supported_events(){var t=await this.SEND({Event:"Get_Supported_Events"}),s=t.get_passthrough("local"),t=t.get_passthrough("external");return{local:s?s.split(","):[],external:t?t.split(","):[]}}async get_fmo_infos(){let t={};try{t=await this.EXECUTE({Command:"GetFMO"})}catch(t){}return new sstp_fmo_info_t(t)}async available(){return(await this.get_fmo_infos()).available()}async new_event_queryer(){var t=new ghost_events_queryer_t(this);return await t.init(),t}}var jsstp=new jsstp_t,jsttp=jsstp,jsttp_t=jsstp_t,sttp_info_t=sstp_info_t,sttp_fmo_info_t=sstp_fmo_info_t;